module that multiply a metix

Check module doc:
	>>> mod_doc = __import__('2-matrix_divided').__doc__
	>>> len(mod_doc) > 1
	True

Import function:
	>>> matrix_div = __import__('2-matrix_divided').matrix_divided

Check function doc:
	>>> func_doc = matrix_div.__doc__
	>>> len(func_doc) > 1
	True

Check for normal matrix:
	>>> matrix = [[1, 2, 3],[4, 5, 6]]
	>>> matrix_div(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Check irregular rows:
	>>> matrix = [[1, 2, 3],[4, 5, 7, 6]]
	>>> matrix_div(matrix, 3)
	Traceback (most recent call last):
        ...
        TypeError: Each row of the matrix must have the same size

Check list with string:
	>>> matrix = [[1, "str", 3],[4, 5, 7]]
	>>> matrix_div(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Check div:
	>>> matrix_div([[1, 2, 3],[4, 5, 7]],  "3")
	Traceback (most recent call last):
	...
	TypeError: div must be a number
	>>> matrix_div([[1, 2, 3],[4, 5, 7]],  0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

Check argc:
	>>> matrix_div()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
	>>> matrix_div([[1, 2, 3],[4, 5, 7]])
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
